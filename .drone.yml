# sdk @iexec/web3mail default pipeline
kind: pipeline
type: docker
name: sdk-default

trigger:
  event:
    exclude:
      - promote
      - pull_request

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types
    depends_on:
      - install

  - name: test:unit
    image: node:18.19
    commands:
      - npm run test:unit
    depends_on:
      - install

  ##### START LOCAL STACK #####
  - name: prepare-local-stack-env
    image: node
    commands:
      - node tests/scripts/prepare-test-env.js

  - name: bellecour-fork
    detach: true
    image: ghcr.io/foundry-rs/foundry:v1.0.0
    pull: always
    expose:
      - 8545
    commands:
      - anvil --host 0.0.0.0 --port 8545 --block-time 1 --hardfork berlin --fork-url $(cat local-stack-env/BELLECOUR_FORK_URL) --fork-block-number $(cat local-stack-env/BELLECOUR_FORK_BLOCK) --chain-id 134 --gas-limit 6700000 --gas-price 0
    depends_on:
      - prepare-local-stack-env

  - name: bellecour-fork-healthy
    image: bash
    commands:
      - while ! nc -z bellecour-fork 8545 ; do sleep 1 ; done && echo "bellecour-fork ready"
    depends_on:
      - bellecour-fork

  - name: ipfs
    image: ipfs/go-ipfs:v0.9.1
    detach: true
    expose:
      - 8080
      - 5001

  - name: ipfs-healthy
    image: bash
    commands:
      - while ! nc -z ipfs 8080 ; do sleep 1 ; done && echo "ipfs gateway ready"
      - while ! nc -z ipfs 5001 ; do sleep 1 ; done && echo "ipfs upload ready"
    depends_on:
      - ipfs

  - name: market-mongo
    image: mongo:6.0.24
    detach: true
    expose:
      - 27017

  - name: market-mongo-healthy
    image: bash
    commands:
      - while ! nc -z market-mongo 27017 ; do sleep 1 ; done && echo "market-mongo ready"
    depends_on:
      - market-mongo

  - name: market-redis
    image: redis:7.0.7-alpine
    detach: true
    commands:
      - redis-server --appendonly yes
    expose:
      - 6379

  - name: market-redis-healthy
    image: bash
    commands:
      - while ! nc -z market-redis 6379 ; do sleep 1 ; done && echo "market-redis ready"
    depends_on:
      - market-redis

  - name: result-proxy-mongo
    image: library/mongo:4.2
    detach: true
    commands:
      - mongod --bind_ip_all --port 13202
    expose:
      - 13202

  - name: result-proxy-mongo-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy-mongo 13202 ; do sleep 1 ; done && echo "result-proxy-mongo ready"
    depends_on:
      - result-proxy-mongo

  - name: graphnode-postgres
    image: postgres:12
    detach: true
    commands:
      - docker-entrypoint.sh postgres -cshared_preload_libraries=pg_stat_statements
    expose:
      - 5432
    environment:
      POSTGRES_USER: graphnode
      POSTGRES_PASSWORD: password
      POSTGRES_DB: graphnode-db
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=C'

  - name: graphnode-postgres-healthy
    image: bash
    commands:
      - while ! nc -z graphnode-postgres 5432 ; do sleep 1 ; done && echo "graphnode-postgres ready"
    depends_on:
      - graphnode-postgres

  - name: graphnode
    image: graphprotocol/graph-node:v0.34.1
    detach: true
    expose:
      - 8000
      - 8020
    environment:
      postgres_host: graphnode-postgres
      postgres_port: 5432
      postgres_user: graphnode
      postgres_pass: password
      postgres_db: graphnode-db
      ipfs: ipfs:5001
      ethereum: bellecour:http://bellecour-fork:8545
    commands:
      - export GRAPH_ETHEREUM_GENESIS_BLOCK_NUMBER=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - ipfs-healthy
      - graphnode-postgres-healthy

  - name: graphnode-healthy
    image: bash
    commands:
      - while ! nc -z graphnode 8020 ; do sleep 1 ; done && echo "graphnode admin ready"
      - while ! nc -z graphnode 8000 ; do sleep 1 ; done && echo "graphnode gql ready"
    depends_on:
      - graphnode

  - name: sms
    image: iexechub/iexec-sms:8.7.0
    detach: true
    environment:
      JAVA_TOOL_OPTIONS: '-Xmx256M'
      IEXEC_SMS_BLOCKCHAIN_NODE_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      IEXEC_SMS_TEE_RUNTIME_FRAMEWORK: scone
      IEXEC_SMS_IMAGE_LAS_IMAGE: 'las-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_IMAGE: 'pre-compute-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_FINGERPRINT: 'pre-compute-fingerprint'
      IEXEC_TEE_WORKER_POST_COMPUTE_IMAGE: 'post-compute-image'
      IEXEC_TEE_WORKER_POST_COMPUTE_FINGERPRINT: 'post-compute-fingerprint'
    expose:
      - 13300
    depends_on:
      - bellecour-fork-healthy

  - name: sms-healthy
    image: bash
    commands:
      - while ! nc -z sms 13300 ; do sleep 1 ; done && echo "sms ready"
    depends_on:
      - sms

  - name: result-proxy
    image: iexechub/iexec-result-proxy:7.1.0
    detach: true
    environment:
      IEXEC_PRIVATE_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_PUBLIC_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: result-proxy-mongo
      MONGO_PORT: 13202
      IEXEC_IPFS_HOST: ipfs
    expose:
      - 13200
    depends_on:
      - bellecour-fork-healthy
      - ipfs-healthy
      - result-proxy-mongo-healthy

  - name: result-proxy-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy 13200 ; do sleep 1 ; done && echo "result-proxy ready"
    depends_on:
      - result-proxy

  - name: market-watcher
    image: iexechub/iexec-market-watcher:6.4
    detach: true
    environment:
      CHAIN: BELLECOUR
      ETH_WS_HOST: ws://bellecour-fork:8545
      ETH_RPC_HOST: http://bellecour-fork:8545
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /app
      - npm start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api
    image: iexechub/iexec-market-api:6.4
    detach: true
    expose:
      - 3000
    environment:
      CHAINS: BELLECOUR_FORK
      BELLECOUR_FORK_ETH_RPC_HOST: http://bellecour-fork:8545
      BELLECOUR_FORK_CHAIN_ID: 134
      BELLECOUR_FORK_IS_NATIVE: 'true'
      BELLECOUR_FORK_IEXEC_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
      RATE_LIMIT_MAX: 10000
      RATE_LIMIT_PERIOD: 60000
      MAX_OPEN_ORDERS_PER_WALLET: 1000
    depends_on:
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api-healthy
    image: bash
    commands:
      - while ! nc -z market-api 3000 ; do sleep 1 ; done && echo "market-api ready"
    depends_on:
      - market-api
      - market-watcher

  - name: dataprotector-subgraph-deployer
    image: iexechub/dataprotector-subgraph-deployer:3.0.0
    environment:
      ENV: prod
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /app/packages/subgraph && npm run all
    depends_on:
      - prepare-local-stack-env
      - ipfs-healthy
      - graphnode-healthy

  - name: voucher-subgraph-deployer
    # https://github.com/iExecBlockchainComputing/iexec-voucher-subgraph
    image: iexechub/voucher-subgraph-deployer:1.0.0
    pull: always
    environment:
      RPC_URL: http://bellecour-fork:8545
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
      VOUCHER_HUB_ADDRESS: '0x3137B6DF4f36D338b82260eDBB2E7bab034AFEda'
    commands:
      - export VOUCHER_HUB_START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /iexec-voucher-subgraph && npm run all
    depends_on:
      - prepare-local-stack-env
      - ipfs-healthy
      - graphnode-healthy

  - name: stack-ready
    image: bash
    commands:
      - echo "all services ready"
    depends_on:
      - bellecour-fork-healthy
      - sms-healthy
      - result-proxy-healthy
      - market-api-healthy
      - ipfs-healthy
      - graphnode-healthy
      - dataprotector-subgraph-deployer
      - voucher-subgraph-deployer
  ##### START LOCAL STACK END #####

  - name: test:e2e
    image: node:18.19
    commands:
      - npm run test:prepare
      - npm run test:e2e
    depends_on:
      - install
      - stack-ready

  - name: build
    image: node:18.19
    commands:
      - npm run build
    depends_on:
      - install

  - name: npm-publish-dry-run
    image: node:18.19
    commands:
      - npm publish --dry-run
    depends_on:
      - format
      - lint
      - check-types
      - test:unit
      - test:e2e
      - build

---
# sdk @iexec/web3mail publish npm nightly pipeline
kind: pipeline
type: docker
name: sdk-publish-nightly

trigger:
  event:
    - promote
  target:
    - sdk-nightly
  branch:
    - develop

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types
    depends_on:
      - install

  - name: build
    image: node:18.19
    commands:
      - npm run build
    depends_on:
      - install

  - name: set-version-nightly
    image: node:18.19
    commands:
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"
    depends_on:
      - build

  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
    depends_on:
      - format
      - lint
      - check-types
      - build

  - name: deprecate-old-nightly-version
    image: node:18.19
    pull: always
    commands:
      - apt-get update && apt-get install -y jq
      # fetches the latest nightly version of the @iexec/web3mail package from npm registry
      - PREVIOUS_NIGHTLY_VERSION=$(npm view @iexec/web3mail dist-tags --json | jq '."nightly"' | sed 's/"//g')
      - if [ -n "$PREVIOUS_NIGHTLY_VERSION" ]; then npm deprecate @iexec/web3mail@$PREVIOUS_NIGHTLY_VERSION "Deprecate $PREVIOUS_NIGHTLY_VERSION"; fi
    depends_on:
      - format
      - lint
      - check-types
      - build
      - authenticate
    when:
      branch:
        - develop

  - name: publish-nightly
    image: plugins/npm
    pull: always
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: nightly
      access: public
    depends_on:
      - format
      - lint
      - check-types
      - build
      - deprecate-old-nightly-version
      - set-version-nightly
    when:
      branch:
        - develop

---
# sdk @iexec/web3mail publish npm latest pipeline
kind: pipeline
type: docker
name: sdk-publish-latest

trigger:
  event:
    - promote
  target:
    - sdk-latest
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types
    depends_on:
      - install

  - name: build
    image: node:18.19
    commands:
      - npm run build
    depends_on:
      - install

  - name: publish
    image: plugins/npm
    pull: always
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: latest
      access: public
    depends_on:
      - format
      - lint
      - check-types
      - build

---
# dapp web3mail-dapp default pipeline
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: dapp-default

trigger:
  event: push

steps:
  - name: install
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: check version match [get scone fingerprint (prod)]
    image: node:18.19
    commands:
      - cd dapp
      - cat ../.drone.yml | grep "iexechub/web3mail-dapp:$(npm pkg get version | sed 's/"//g')-sconify-"

  - name: format
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run check-format

  - name: lint
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run lint

  - name: test
    image: node:14-alpine3.11
    environment:
      MJ_APIKEY_PUBLIC:
        from_secret: mj_apikey_public
      MJ_APIKEY_PRIVATE:
        from_secret: mj_apikey_private
      MJ_SENDER:
        from_secret: mj_sender
      MAILGUN_APIKEY:
        from_secret: mailgun_apikey
      WEB3MAIL_WHITELISTED_APPS:
        from_secret: web3mail_whitelisted_apps
    commands:
      - cd dapp
      - npm run ctest

  - name: docker-publish-dry-run
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      dry_run: true
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/web3mail-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password

---
# dapp web3mail-dapp publish docker dev non-tee pipeline
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: dapp-dev-non-tee

trigger:
  event:
    - promote
  target:
    - dapp-dev-non-tee
  branch:
    - develop

steps:
  - name: install
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd dapp
      - npm run lint

  - name: test
    image: node:14-alpine3.11
    environment:
      MJ_APIKEY_PUBLIC:
        from_secret: mj_apikey_public
      MJ_APIKEY_PRIVATE:
        from_secret: mj_apikey_private
      MJ_SENDER:
        from_secret: mj_sender
      MAILGUN_APIKEY:
        from_secret: mailgun_apikey
      WEB3MAIL_WHITELISTED_APPS:
        from_secret: web3mail_whitelisted_apps
    commands:
      - cd dapp
      - npm run ctest

  - name: docker-publish-dev-non-tee
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/web3mail-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - dev
        - 'dev-${DRONE_COMMIT}'

---
# dapp web3mail-dapp publish docker prod non-tee pipeline
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: dapp-prod-non-tee

trigger:
  event:
    - promote
  target:
    - dapp-prod-non-tee
  branch:
    - main

steps:
  - name: install
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd dapp
      - npm run lint

  - name: test
    image: node:14-alpine3.11
    environment:
      MJ_APIKEY_PUBLIC:
        from_secret: mj_apikey_public
      MJ_APIKEY_PRIVATE:
        from_secret: mj_apikey_private
      MJ_SENDER:
        from_secret: mj_sender
      MAILGUN_APIKEY:
        from_secret: mailgun_apikey
      WEB3MAIL_WHITELISTED_APPS:
        from_secret: web3mail_whitelisted_apps
    commands:
      - cd dapp
      - npm run ctest

  - name: extract-version-from-package
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - cd dapp
      - npm pkg get version | sed 's/"//g' > ../.tags

  - name: docker-publish-prod-non-tee
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      # tag comes from .tags file
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/web3mail-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password

---
# dapp-deployment default pipeline
# /!\ every step must run in dapp-deployment/
kind: pipeline
type: docker
name: dapp-deployment-default

trigger:
  event: push

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: lint
    image: node:18.19
    commands:
      - cd deployment-dapp
      - npm run lint

  - name: format
    image: node:18.19
    commands:
      - cd deployment-dapp
      - npm run check-format

---
#pipeline to publish dapp contract on iexec
kind: pipeline
type: docker
name: deploy-dapp-contract

trigger:
  event:
    - promote
  target:
    - dapp-dev
    - dapp-prod
  branch:
    - develop
    - main

steps:
  - name: get scone fingerprint (dev)
    image: iexechub/web3mail-dapp:dev-${DRONE_COMMIT}-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment-dapp/.scone-fingerprint
    when:
      target:
        - dapp-dev
      branch:
        - develop

  - name: get scone fingerprint (prod)
    # /!\: maintain the version here
    image: iexechub/web3mail-dapp:0.9.0-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment-dapp/.scone-fingerprint
    when:
      target:
        - dapp-prod
      branch:
        - main

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node
      - cd ../../deployment-dapp
      - npm ci

  - name: deploy dapp contract
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run deploy-dapp

  - name: push dapp secret
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
      MJ_APIKEY_PUBLIC:
        from_secret: mj_apikey_public
      MJ_APIKEY_PRIVATE:
        from_secret: mj_apikey_private
      MJ_SENDER:
        from_secret: mj_sender
      MAILGUN_APIKEY:
        from_secret: mailgun_apikey
    commands:
      - cd deployment-dapp
      - npm run push-dapp-secret

  - name: publish free sell order
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
      PRICE: '0'
      VOLUME: '1000000000'
    commands:
      - cd deployment-dapp
      - npm run publish-sell-order

  - name: add resource to whitelist dev
    image: node:18.12.1
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-dev-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-dev-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - export ADDRESS_TO_ADD=$(cat ../../deployment-dapp/.app-address) && npm run addResourceToWhitelist
    when:
      target:
        - dapp-dev
      branch:
        - develop

  - name: add resource to whitelist prod
    image: node:18.12.1
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-prod-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - export ADDRESS_TO_ADD=$(cat ../../deployment-dapp/.app-address) && npm run addResourceToWhitelist
    when:
      target:
        - dapp-prod
      branch:
        - main

  - name: configure ENS
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run configure-ens

---
# pipeline to publish sell order
kind: pipeline
type: docker
name: publish-apporder

trigger:
  event:
    - promote
  target:
    - dapp-publish-sell-order-dev
    - dapp-publish-sell-order-prod
  branch:
    - develop
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: publish sell order
    image: node:18.19
    pull: always
    params:
      - PRICE
      - VOLUME
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run publish-sell-order

---
# pipeline to revoke sell order
kind: pipeline
type: docker
name: revoke-apporder

trigger:
  event:
    - promote
  target:
    - dapp-revoke-sell-order-dev
    - dapp-revoke-sell-order-prod
  branch:
    - develop
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: revoke sell order
    image: node:18.19
    pull: always
    params:
      - ORDER_HASH
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run revoke-sell-order

---
# pipeline to push app secret
kind: pipeline
type: docker
name: push-app-secret

trigger:
  event:
    - promote
  target:
    - dapp-push-secret-dev
    - dapp-push-secret-prod
  branch:
    - develop
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: push dapp secret
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3mail-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3mail-dapp-owner-prod-privatekey
      MJ_APIKEY_PUBLIC:
        from_secret: mj_apikey_public
      MJ_APIKEY_PRIVATE:
        from_secret: mj_apikey_private
      MJ_SENDER:
        from_secret: mj_sender
      MAILGUN_APIKEY:
        from_secret: mailgun_apikey
    commands:
      - cd deployment-dapp
      - npm run push-dapp-secret
---
# pipeline to add ressource to whitelist smart contract
kind: pipeline
type: docker
name: add-ressource-to-whitelist

trigger:
  event:
    - promote
  target:
    - add-resource-to-whitelist-dev
    - add-resource-to-whitelist-prod
  branch:
    - develop
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node

  - name: add resource to whitelist dev
    image: node:18.12.1
    params:
      - ADDRESS_TO_ADD
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-dev-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-dev-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run addResourceToWhitelist
    when:
      target:
        - add-resource-to-whitelist-dev
      branch:
        - develop

  - name: add resource to whitelist prod
    image: node:18.12.1
    params:
      - ADDRESS_TO_ADD
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-prod-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run addResourceToWhitelist
    when:
      target:
        - add-resource-to-whitelist-prod
      branch:
        - main
---
# pipeline to remove ressource from whitelist smart contract
kind: pipeline
type: docker
name: remove-resource-from-whitelist

trigger:
  event:
    - promote
  target:
    - remove-resource-from-whitelist-dev
    - remove-resource-from-whitelist-prod
  branch:
    - develop
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node

  - name: remove ressource from whitelist dev
    image: node:18.12.1
    params:
      - ADDRESS_TO_REMOVE
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-dev-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-dev-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run removeResourceFromWhitelist
    when:
      target:
        - remove-resource-from-whitelist-dev
      branch:
        - develop

  - name: remove resource from whitelist prod
    image: node:18.12.1
    params:
      - ADDRESS_TO_REMOVE
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-prod-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run removeResourceFromWhitelist
    when:
      target:
        - remove-resource-from-whitelist-prod
      branch:
        - main
---
# pipeline to transfer ownership of whitelist smart contract
kind: pipeline
type: docker
name: transfer-ownership-whitelist-smart-contract

trigger:
  event:
    - promote
  target:
    - transfer-ownership-whitelist-smart-contract-dev
    - transfer-ownership-whitelist-smart-contract-prod
  branch:
    - develop
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node

  - name: transfer ownsership dev
    image: node:18.12.1
    params:
      - NEW_OWNER_ADDRESS
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-dev-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-dev-address
    commands:
      - cd node_modules/whitelist-contract
      - npm run transferOwnership
    when:
      target:
        - transfer-ownership-whitelist-smart-contract-dev
      branch:
        - develop

  - name: transfer ownsership prod
    image: node:18.12.1
    params:
      - NEW_OWNER_ADDRESS
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3mail-dapp-owner-prod-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3mail-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run transferOwnership
    when:
      target:
        - transfer-ownership-whitelist-smart-contract-prod
      branch:
        - main
---
kind: pipeline
type: docker
name: deprecate-version

trigger:
  event:
    - promote
  target:
    - npm-deprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: deprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/web3mail@$PACKAGE_VERSION "deprecate $PACKAGE_VERSION"; else echo "PACKAGE_VERSION is not set"; fi
---
kind: pipeline
type: docker
name: undeprecate version

trigger:
  event:
    - promote
  target:
    - npm-undeprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: undeprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/web3mail@$PACKAGE_VERSION ""; else echo "PACKAGE_VERSION is not set"; fi
